/*
 ============================================================================
 Name        : singly_linkedlist.c
 Author      : Saddam Sayyed
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
typedef enum{EXIT,ADDFIRST,ADDLAST,ADDATPOS,DELFIRST,DELLAST,DELFROMPOS,TRAVERSE}MENU;
typedef struct node
{
	int data;
	struct node *next;
}NODE;
NODE *head=NULL;
MENU menu_choice()
{
	MENU mchoice;
	printf("\n 0. Exit");
	printf("\n 1. Add Element at First");
	printf("\n 2. Add Element at last");
	printf("\n 3. Add Element at given position");
	printf("\n 4. Delete Element from First");
	printf("\n 5. Delete Element from last");
	printf("\n 6. Delete Element from given position");
	printf("\n 7. Traverse ");
	scanf("%d",&mchoice);
	return mchoice;
}
void accept_data(int *data)
{
	printf("\n Specify Data to add:");
	scanf("%d",data);
}
NODE *creatnode()
{
	NODE *temp;
	temp=(NODE *)malloc(sizeof(NODE));
	temp->next=NULL;
	return(temp);
}
void add_at_first(int *data)
{
	NODE = *newnode;
	if(head==NULL)
		head=newnode;
	else
	{

	}
}
int main(void)
{
	MENU mchoice;
	int data,pos;
	do
		{
			switch(mchoice)
			{
				case ADDFIRST:
							accept_data(&data);
							add_at_first(data);
							break;
				case ADDLAST:
							accept_data(&data);
							add_element_at_last(data);
							break;
				case ADDATPOS:
							printf("\n Specify position for newnode");
							scanf("%d",&pos);
							if(pos<=0 || pos > (size()+1))
								printf("\n Invalid position");
							else
							{
								accept_data(&data);
								add_element_at_pos(data,pos);
							}
							break;
				case TRAVERSE:
							printf("\n Traverse in Forward Direction \n");
							traverse_list_forward();
							printf("\n Traverse in Backward Direction \n");
							traverse_list_backward(head);
							break;
				case DELFIRST:
							del_element_from_first();
							break;
				case DELLAST:
							del_element_from_last();
							break;
				case DELFROMPOS:
							printf("\n Specify position for newnode");
							scanf("%d",&pos);
							if(pos<=0 || pos > size())
								printf("\n Invalid position");
							else
							{
								del_element_from_given_pos(pos);
							}
							break;
			}
		}while((mchoice=menu_choice())!=EXIT);
		free_list();

	return EXIT_SUCCESS;
}
